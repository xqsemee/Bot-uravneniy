import telebot
from telebot import types
import random
from config import TOKEN


database = {}
bot = telebot.TeleBot(TOKEN)


@bot.message_handler(commands=['start'])
def send_welcome(message):
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        touch_line = types.KeyboardButton('–õ–∏–Ω–µ–π–Ω—ã–µ')
        touch_play = types.KeyboardButton('–ò–≥—Ä—ã üé≤')
        markup.add(touch_line, touch_play)
        bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!‚úã –£ —Ç–µ–±—è –ø—Ä–æ–±–ª–µ–º—ã —Å —É—Ä–∞–≤–Ω–µ–Ω–∏—è–º–∏?üëé '
                                          f'–Ø –±–æ—Ç,–∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Ä–µ—à–∏—Ç—å —Ç–≤–æ–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è!üòú '
                                          f'–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π –º–µ–Ω—è –¥—Ä—É–∑—å—è–º,–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!', reply_markup=markup)
    except:
        pass


@bot.message_handler(content_types=['text'])
def manager_commands(message):
    try:
        if message.text == '–õ–∏–Ω–µ–π–Ω—ã–µ':
            answer = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É: ',
                                      reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(answer, doing_line)
        elif message.text.split()[0] == '–ò–≥—Ä—ã':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            touch_game1 = types.KeyboardButton('–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ!')
            touch_game2 = types.KeyboardButton('–û—Ä–µ–ª –∏ —Ä–µ—à–∫–∞!')
            touch_game3 = types.KeyboardButton('–ó–∞–≥–∞–¥–∞–π —á–∏—Å–ª–æ!')
            markup.add(touch_game1, touch_game2, touch_game3)
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –∏–≥—Ä—É, –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–∏–≥—Ä–∞—Ç—å', reply_markup=markup)

        elif message.text == '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ!' or message.text == '–£–≥–∞–¥–∞—Ç—å –µ—â–µ —Ä–∞–∑':
            answer = bot.send_message(message.chat.id, '–£–≥–∞–¥–∞–π –º–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10!',
                                      reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(answer, random_num)

        elif message.text == '–û—Ä–µ–ª –∏ —Ä–µ—à–∫–∞!' or message.text == '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            touch_eagle = types.KeyboardButton('ü¶Ö')
            touch_coin = types.KeyboardButton('üå∞')
            markup.add(touch_eagle, touch_coin)
            answer = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ: –û—Ä–µ–ª –∏–ª–∏ –†–µ—à–∫–∞?', reply_markup=markup)
            bot.register_next_step_handler(answer, eagle_or_coin_game)

        elif message.text == '–ó–∞–≥–∞–¥–∞–π —á–∏—Å–ª–æ!':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            touch_bigger = types.KeyboardButton('–ë–æ–ª—å—à–µ')
            touch_smaller = types.KeyboardButton('–ú–µ–Ω—å—à–µ')
            touch_yes = types.KeyboardButton('–î–∞')
            touch_back = types.KeyboardButton('–ù–∞ –≥–ª–∞–≤–Ω—É—é')
            markup.add(touch_bigger, touch_smaller, touch_yes, touch_back)
            database[message.chat.id] = '1 1000 1 500'
            answer = bot.send_message(message.chat.id, '–í–∞—à–µ —á–∏—Å–ª–æ 500?', reply_markup=markup)
            bot.register_next_step_handler(answer, binary_search)

        elif message.text == '–ù–∞ –≥–ª–∞–≤–Ω—É—é':
            send_welcome(message)
    except:
        send_welcome(message)


def random_num(message):
    try:
        pc_digit = random.randint(1, 10)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        touch_replay = types.KeyboardButton('–£–≥–∞–¥–∞—Ç—å –µ—â–µ —Ä–∞–∑')
        touch_back_to_home = types.KeyboardButton('–ù–∞ –≥–ª–∞–≤–Ω—É—é')
        markup.add(touch_replay, touch_back_to_home)
        if int(message.text) == pc_digit:
            bot.send_message(message.chat.id, '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –Ø –Ω–µ –æ–∂–∏–¥–∞–ª –æ—Ç –≤–∞—Å —Ç–∞–∫–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞!', reply_markup=markup)
        else:
            bot.send_message(message.chat.id, f'–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –ú–æ–µ —á–∏—Å–ª–æ {pc_digit}', reply_markup=markup)
    except:
        send_welcome(message)


def eagle_or_coin_game(message):
    try:
        pc_choice = random.choice(['ü¶Ö', 'üå∞'])
        if pc_choice == 'ü¶Ö':
            bot.send_message(message.chat.id, 'ü™ô')
        else:
            bot.send_message(message.chat.id, 'üå∞')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        touch_replay = types.KeyboardButton('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑')
        touch_back_to_home = types.KeyboardButton('–ù–∞ –≥–ª–∞–≤–Ω—É—é')
        markup.add(touch_replay, touch_back_to_home)
        if pc_choice == message.text:
            bot.send_message(message.chat.id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!', reply_markup=markup)
        else:
            bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!', reply_markup=markup)
    except:
        send_welcome(message)


def binary_search(message):
    try:
        if message.text == '–î–∞':
            bot.send_message(message.chat.id, f'–Ø —É–≥–∞–¥–∞–ª –í–∞—à–µ —á–∏—Å–ª–æ –∑–∞ {database[message.chat.id].split()[2]} –ø–æ–ø—ã—Ç–æ–∫.')
            del database[message.chat.id]
            return send_welcome(message)

        elif message.text == '–ë–æ–ª—å—à–µ':
            foo = database[message.chat.id].split()
            ready = (int(foo[3]) + int(foo[1])) // 2
            database[message.chat.id] = f'{foo[3]} {foo[1]} {int(foo[2]) + 1} {ready}'
            answer = bot.send_message(message.chat.id, f'–í–∞—à–µ —á–∏—Å–ª–æ {ready}?')
            bot.register_next_step_handler(answer, binary_search)

        elif message.text == '–ú–µ–Ω—å—à–µ':
            foo = database[message.chat.id].split()
            ready = (int(foo[0]) + int(foo[3])) // 2
            database[message.chat.id] = f'{foo[0]} {foo[3]} {int(foo[2]) + 1} {ready}'
            answer = bot.send_message(message.chat.id, f'–í–∞—à–µ —á–∏—Å–ª–æ {ready}?')
            bot.register_next_step_handler(answer, binary_search)

        elif message.text == '–ù–∞ –≥–ª–∞–≤–Ω—É—é':
            send_welcome(message)

        else:
            answer = bot.send_message(message.chat.id, '–û—Ç–≤–µ—á–∞–π –∫–Ω–æ–ø–∫–∞–º–∏!')
            bot.register_next_step_handler(answer, binary_search)
    except:
        send_welcome(message)


def doing_line(message):
    try:
        first, second = message.text.split('=')
        digits_left = 0
        for i in first.split():
            if i.isdigit():
                if first.split()[first.split().index(i)-1] == '+' or first.split().index(i) == 0:
                    digits_left += int(i)
                elif first.split()[first.split().index(i)-1] == '-':
                    digits_left -= int(i)
        if len(second.split()) > 1:
            digits_right = 0
            for i in second.split():
                if i.isdigit():
                    if second.split()[second.split().index(i) - 1] == '+' or second.split().index(i) == 0:
                        digits_right += int(i)
                    elif second.split()[second.split().index(i) - 1] == '-':
                        digits_right -= int(i)
            ready = digits_right + -digits_left
        else:
            ready = int(second) + -digits_left
        bot.send_message(message.chat.id, f'–û—Ç–≤–µ—Ç: x = {ready}')
    except:
        send_welcome(message)


if __name__ == '__main__':
    bot.polling(non_stop=True)
